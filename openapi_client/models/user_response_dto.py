# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.79.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class UserResponseDto(BaseModel):
    """
    UserResponseDto
    """
    created_at: datetime = Field(..., alias="createdAt")
    deleted_at: Optional[datetime] = Field(..., alias="deletedAt")
    email: StrictStr = Field(...)
    external_path: Optional[StrictStr] = Field(..., alias="externalPath")
    first_name: StrictStr = Field(..., alias="firstName")
    id: StrictStr = Field(...)
    is_admin: StrictBool = Field(..., alias="isAdmin")
    last_name: StrictStr = Field(..., alias="lastName")
    memories_enabled: Optional[StrictBool] = Field(None, alias="memoriesEnabled")
    oauth_id: StrictStr = Field(..., alias="oauthId")
    profile_image_path: StrictStr = Field(..., alias="profileImagePath")
    should_change_password: StrictBool = Field(..., alias="shouldChangePassword")
    storage_label: Optional[StrictStr] = Field(..., alias="storageLabel")
    updated_at: datetime = Field(..., alias="updatedAt")
    __properties = ["createdAt", "deletedAt", "email", "externalPath", "firstName", "id", "isAdmin", "lastName", "memoriesEnabled", "oauthId", "profileImagePath", "shouldChangePassword", "storageLabel", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserResponseDto:
        """Create an instance of UserResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if deleted_at (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted_at is None and "deleted_at" in self.__fields_set__:
            _dict['deletedAt'] = None

        # set to None if external_path (nullable) is None
        # and __fields_set__ contains the field
        if self.external_path is None and "external_path" in self.__fields_set__:
            _dict['externalPath'] = None

        # set to None if storage_label (nullable) is None
        # and __fields_set__ contains the field
        if self.storage_label is None and "storage_label" in self.__fields_set__:
            _dict['storageLabel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserResponseDto:
        """Create an instance of UserResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserResponseDto.parse_obj(obj)

        _obj = UserResponseDto.parse_obj({
            "created_at": obj.get("createdAt"),
            "deleted_at": obj.get("deletedAt"),
            "email": obj.get("email"),
            "external_path": obj.get("externalPath"),
            "first_name": obj.get("firstName"),
            "id": obj.get("id"),
            "is_admin": obj.get("isAdmin"),
            "last_name": obj.get("lastName"),
            "memories_enabled": obj.get("memoriesEnabled"),
            "oauth_id": obj.get("oauthId"),
            "profile_image_path": obj.get("profileImagePath"),
            "should_change_password": obj.get("shouldChangePassword"),
            "storage_label": obj.get("storageLabel"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


