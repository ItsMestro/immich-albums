# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.88.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictBool, StrictStr, conlist

from typing import List, Optional

from openapi_client.models.person_response_dto import PersonResponseDto
from openapi_client.models.search_explore_response_dto import SearchExploreResponseDto
from openapi_client.models.search_response_dto import SearchResponseDto

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_explore_data(self, **kwargs) -> List[SearchExploreResponseDto]:  # noqa: E501
        """get_explore_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_explore_data(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[SearchExploreResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_explore_data_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_explore_data_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_explore_data_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """get_explore_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_explore_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[SearchExploreResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_explore_data" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[SearchExploreResponseDto]",
        }

        return self.api_client.call_api(
            '/search/explore', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search(self, q : Optional[StrictStr] = None, query : Optional[StrictStr] = None, clip : Optional[StrictBool] = None, type : Optional[StrictStr] = None, is_favorite : Optional[StrictBool] = None, is_archived : Optional[StrictBool] = None, exif_info_city : Optional[StrictStr] = None, exif_info_state : Optional[StrictStr] = None, exif_info_country : Optional[StrictStr] = None, exif_info_make : Optional[StrictStr] = None, exif_info_model : Optional[StrictStr] = None, exif_info_projection_type : Optional[StrictStr] = None, smart_info_objects : Optional[conlist(StrictStr)] = None, smart_info_tags : Optional[conlist(StrictStr)] = None, recent : Optional[StrictBool] = None, motion : Optional[StrictBool] = None, **kwargs) -> SearchResponseDto:  # noqa: E501
        """search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search(q, query, clip, type, is_favorite, is_archived, exif_info_city, exif_info_state, exif_info_country, exif_info_make, exif_info_model, exif_info_projection_type, smart_info_objects, smart_info_tags, recent, motion, async_req=True)
        >>> result = thread.get()

        :param q:
        :type q: str
        :param query:
        :type query: str
        :param clip:
        :type clip: bool
        :param type:
        :type type: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_archived:
        :type is_archived: bool
        :param exif_info_city:
        :type exif_info_city: str
        :param exif_info_state:
        :type exif_info_state: str
        :param exif_info_country:
        :type exif_info_country: str
        :param exif_info_make:
        :type exif_info_make: str
        :param exif_info_model:
        :type exif_info_model: str
        :param exif_info_projection_type:
        :type exif_info_projection_type: str
        :param smart_info_objects:
        :type smart_info_objects: List[str]
        :param smart_info_tags:
        :type smart_info_tags: List[str]
        :param recent:
        :type recent: bool
        :param motion:
        :type motion: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SearchResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_with_http_info(q, query, clip, type, is_favorite, is_archived, exif_info_city, exif_info_state, exif_info_country, exif_info_make, exif_info_model, exif_info_projection_type, smart_info_objects, smart_info_tags, recent, motion, **kwargs)  # noqa: E501

    @validate_arguments
    def search_with_http_info(self, q : Optional[StrictStr] = None, query : Optional[StrictStr] = None, clip : Optional[StrictBool] = None, type : Optional[StrictStr] = None, is_favorite : Optional[StrictBool] = None, is_archived : Optional[StrictBool] = None, exif_info_city : Optional[StrictStr] = None, exif_info_state : Optional[StrictStr] = None, exif_info_country : Optional[StrictStr] = None, exif_info_make : Optional[StrictStr] = None, exif_info_model : Optional[StrictStr] = None, exif_info_projection_type : Optional[StrictStr] = None, smart_info_objects : Optional[conlist(StrictStr)] = None, smart_info_tags : Optional[conlist(StrictStr)] = None, recent : Optional[StrictBool] = None, motion : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_with_http_info(q, query, clip, type, is_favorite, is_archived, exif_info_city, exif_info_state, exif_info_country, exif_info_make, exif_info_model, exif_info_projection_type, smart_info_objects, smart_info_tags, recent, motion, async_req=True)
        >>> result = thread.get()

        :param q:
        :type q: str
        :param query:
        :type query: str
        :param clip:
        :type clip: bool
        :param type:
        :type type: str
        :param is_favorite:
        :type is_favorite: bool
        :param is_archived:
        :type is_archived: bool
        :param exif_info_city:
        :type exif_info_city: str
        :param exif_info_state:
        :type exif_info_state: str
        :param exif_info_country:
        :type exif_info_country: str
        :param exif_info_make:
        :type exif_info_make: str
        :param exif_info_model:
        :type exif_info_model: str
        :param exif_info_projection_type:
        :type exif_info_projection_type: str
        :param smart_info_objects:
        :type smart_info_objects: List[str]
        :param smart_info_tags:
        :type smart_info_tags: List[str]
        :param recent:
        :type recent: bool
        :param motion:
        :type motion: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SearchResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'q',
            'query',
            'clip',
            'type',
            'is_favorite',
            'is_archived',
            'exif_info_city',
            'exif_info_state',
            'exif_info_country',
            'exif_info_make',
            'exif_info_model',
            'exif_info_projection_type',
            'smart_info_objects',
            'smart_info_tags',
            'recent',
            'motion'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('q') is not None:  # noqa: E501
            _query_params.append(('q', _params['q']))

        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('clip') is not None:  # noqa: E501
            _query_params.append(('clip', _params['clip']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('is_favorite') is not None:  # noqa: E501
            _query_params.append(('isFavorite', _params['is_favorite']))

        if _params.get('is_archived') is not None:  # noqa: E501
            _query_params.append(('isArchived', _params['is_archived']))

        if _params.get('exif_info_city') is not None:  # noqa: E501
            _query_params.append(('exifInfo.city', _params['exif_info_city']))

        if _params.get('exif_info_state') is not None:  # noqa: E501
            _query_params.append(('exifInfo.state', _params['exif_info_state']))

        if _params.get('exif_info_country') is not None:  # noqa: E501
            _query_params.append(('exifInfo.country', _params['exif_info_country']))

        if _params.get('exif_info_make') is not None:  # noqa: E501
            _query_params.append(('exifInfo.make', _params['exif_info_make']))

        if _params.get('exif_info_model') is not None:  # noqa: E501
            _query_params.append(('exifInfo.model', _params['exif_info_model']))

        if _params.get('exif_info_projection_type') is not None:  # noqa: E501
            _query_params.append(('exifInfo.projectionType', _params['exif_info_projection_type']))

        if _params.get('smart_info_objects') is not None:  # noqa: E501
            _query_params.append(('smartInfo.objects', _params['smart_info_objects']))
            _collection_formats['smartInfo.objects'] = 'multi'

        if _params.get('smart_info_tags') is not None:  # noqa: E501
            _query_params.append(('smartInfo.tags', _params['smart_info_tags']))
            _collection_formats['smartInfo.tags'] = 'multi'

        if _params.get('recent') is not None:  # noqa: E501
            _query_params.append(('recent', _params['recent']))

        if _params.get('motion') is not None:  # noqa: E501
            _query_params.append(('motion', _params['motion']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "SearchResponseDto",
        }

        return self.api_client.call_api(
            '/search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_person(self, name : StrictStr, with_hidden : Optional[StrictBool] = None, **kwargs) -> List[PersonResponseDto]:  # noqa: E501
        """search_person  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_person(name, with_hidden, async_req=True)
        >>> result = thread.get()

        :param name: (required)
        :type name: str
        :param with_hidden:
        :type with_hidden: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PersonResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_person_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_person_with_http_info(name, with_hidden, **kwargs)  # noqa: E501

    @validate_arguments
    def search_person_with_http_info(self, name : StrictStr, with_hidden : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """search_person  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_person_with_http_info(name, with_hidden, async_req=True)
        >>> result = thread.get()

        :param name: (required)
        :type name: str
        :param with_hidden:
        :type with_hidden: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PersonResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'with_hidden'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_person" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('with_hidden') is not None:  # noqa: E501
            _query_params.append(('withHidden', _params['with_hidden']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[PersonResponseDto]",
        }

        return self.api_client.call_api(
            '/search/person', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
